import * as convict from 'convict';
export declare type Schema<T> = convict.Schema<T>;
declare type LoadRelativeTo = 'cwd' | 'parent-module';
export interface ConfigLoadOptions {
    /**
     * Determines whether or not errors will be thrown if specified files are missing
     */
    strict?: boolean;
    /**
     * Display verbose input during configuration loading
     */
    verbose?: boolean;
    /**
     * Override the logger when verbose mode is turned on. The default implementation uses console.log
     */
    logger?: (...args: any[]) => void;
    /**
     * Where to load files from. Specify either `cwd` for the current working directory or `parent-module` to load
     * files relative to the location that imported and created the config using `createProfiguration`
     */
    loadRelativeTo?: LoadRelativeTo;
    /**
     * Configure behavior and source files on a per node environment basis. Will be invoked using the current node environment
     */
    configureEnv?: (nodeEnv: string) => Omit<ConfigLoadOptions, 'configureEnv'> & {
        files?: string | string[];
    };
}
/**
 * Creates a profiguration instance using the provided schema and config options
 * @param schema
 * @param configLoadOptions
 */
export declare const createProfiguration: <K>(schema: convict.Schema<K>, configLoadOptions?: ConfigLoadOptions | undefined) => convict.Config<K>;
export {};
