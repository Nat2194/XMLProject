"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
// @ts-ignore
const dotenv = require("dotenv");
const lodash_1 = require("lodash");
const convict = require("convict");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const parent = require('parent-module');
const defaultConfigLoadOptions = {
    strict: false,
    verbose: false,
    loadRelativeTo: 'cwd',
    logger: console.log,
    configureEnv: env => ({})
};
const isEnvFile = (file) => file.startsWith('.env') || file.endsWith('.env');
const makeConditionalLogger = (enabled, logger) => (message) => {
    if (enabled) {
        logger(`@golevelup/profiguration: ${message}`);
    }
};
const resolveFilePath = (basePath, loadRelativeTo, parent) => path.isAbsolute(basePath)
    ? basePath
    : loadRelativeTo === 'cwd'
        ? path.resolve(process.cwd(), basePath)
        : path.join(path.dirname(parent), basePath);
/**
 * Creates a profiguration instance using the provided schema and config options
 * @param schema
 * @param configLoadOptions
 */
exports.createProfiguration = (schema, configLoadOptions) => {
    const nodeEnv = process.env.NODE_ENV || 'development';
    const { configureEnv } = Object.assign(Object.assign({}, defaultConfigLoadOptions), (configLoadOptions || {}));
    const { verbose, strict, loadRelativeTo, logger, files } = Object.assign(Object.assign(Object.assign({}, defaultConfigLoadOptions), (configLoadOptions || {})), configureEnv(nodeEnv));
    const log = makeConditionalLogger(verbose, logger);
    log(`Loading config in Node Env '${nodeEnv}'`);
    const caller = parent();
    const defaultFiles = files || [];
    const normalizedFiles = Array.isArray(defaultFiles)
        ? defaultFiles
        : [defaultFiles];
    const [willProcess, wontProcess] = lodash_1.partition(normalizedFiles, x => isEnvFile(x) || x.endsWith('.json'));
    if (wontProcess.length) {
        log(`Ignoring the following files which are not .env or .json: ${wontProcess}`);
    }
    const [exists, missing] = lodash_1.partition(willProcess.map(x => {
        const filePath = resolveFilePath(x, loadRelativeTo, caller);
        const exists = fs.existsSync(filePath);
        return {
            filePath,
            exists
        };
    }), x => x.exists);
    if (missing.length) {
        const message = `Missing specified file(s): ${missing.map(x => x.filePath)}`;
        if (strict) {
            throw new Error(message);
        }
        log(message);
    }
    const [dotEnvPaths, jsonPaths] = lodash_1.partition(exists, x => isEnvFile(path.basename(x.filePath)));
    dotEnvPaths.forEach(x => {
        log(`Loading .env file at: '${x.filePath}'`);
        const result = dotenv.config({ path: x.filePath });
        if (result.error) {
            throw result.error;
        }
    });
    const config = convict(schema);
    jsonPaths.forEach(x => {
        log(`Loading .json file at: '${x.filePath}'`);
        config.loadFile(x.filePath);
    });
    const validated = config.validate({
        strict: true
    });
    return validated;
};
//# sourceMappingURL=profiguration.js.map