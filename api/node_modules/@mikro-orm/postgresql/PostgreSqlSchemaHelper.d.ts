import { type Dictionary } from '@mikro-orm/core';
import { SchemaHelper, type AbstractSqlConnection, type Check, type Column, type DatabaseSchema, type DatabaseTable, type ForeignKey, type Index, type Table, type TableDifference, type Knex } from '@mikro-orm/knex';
export declare class PostgreSqlSchemaHelper extends SchemaHelper {
    static readonly DEFAULT_VALUES: {
        'now()': string[];
        'current_timestamp(?)': string[];
        "('now'::text)::timestamp(?) with time zone": string[];
        "('now'::text)::timestamp(?) without time zone": string[];
        'null::character varying': string[];
        'null::timestamp with time zone': string[];
        'null::timestamp without time zone': string[];
    };
    getSchemaBeginning(charset: string): string;
    getListTablesSQL(): string;
    getNamespaces(connection: AbstractSqlConnection): Promise<string[]>;
    private getIgnoredNamespacesConditionSQL;
    loadInformationSchema(schema: DatabaseSchema, connection: AbstractSqlConnection, tables: Table[]): Promise<void>;
    getAllIndexes(connection: AbstractSqlConnection, tables: Table[]): Promise<Dictionary<Index[]>>;
    getAllColumns(connection: AbstractSqlConnection, tables: Table[]): Promise<Dictionary<Column[]>>;
    getAllChecks(connection: AbstractSqlConnection, tables: Table[]): Promise<Dictionary<Check[]>>;
    getAllForeignKeys(connection: AbstractSqlConnection, tables: Table[]): Promise<Dictionary<Dictionary<ForeignKey>>>;
    getEnumDefinitions(connection: AbstractSqlConnection, checks: Check[], tableName?: string, schemaName?: string): Promise<Dictionary<string[]>>;
    createTableColumn(table: Knex.TableBuilder, column: Column, fromTable: DatabaseTable, changedProperties?: Set<string>): Knex.ColumnBuilder;
    configureColumn(column: Column, col: Knex.ColumnBuilder, knex: Knex, changedProperties?: Set<string>): Knex.ColumnBuilder;
    getPreAlterTable(tableDiff: TableDifference, safe: boolean): string;
    getAlterColumnAutoincrement(tableName: string, column: Column, schemaName?: string): string;
    getChangeColumnCommentSQL(tableName: string, to: Column, schemaName?: string): string;
    normalizeDefaultValue(defaultValue: string, length: number): string | number;
    getDatabaseExistsSQL(name: string): string;
    getDatabaseNotExistsError(dbName: string): string;
    getManagementDbName(): string;
    disableForeignKeysSQL(): string;
    enableForeignKeysSQL(): string;
    getRenameIndexSQL(tableName: string, index: Index, oldIndexName: string): string;
    private getIndexesSQL;
    private getChecksSQL;
    getChecks(connection: AbstractSqlConnection, tableName: string, schemaName: string, columns?: Column[]): Promise<Check[]>;
    getColumns(connection: AbstractSqlConnection, tableName: string, schemaName?: string): Promise<Column[]>;
    getIndexes(connection: AbstractSqlConnection, tableName: string, schemaName?: string): Promise<Index[]>;
}
