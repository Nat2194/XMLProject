"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectRepository = exports.getRepositoryToken = exports.InjectEntityManager = exports.getEntityManagerToken = exports.InjectMikroORM = exports.getMikroORMToken = exports.logger = exports.CONTEXT_NAMES = exports.MIKRO_ORM_MODULE_OPTIONS = void 0;
const core_1 = require("@mikro-orm/core");
const common_1 = require("@nestjs/common");
exports.MIKRO_ORM_MODULE_OPTIONS = Symbol('mikro-orm-module-options');
exports.CONTEXT_NAMES = [];
exports.logger = new common_1.Logger(core_1.MikroORM.name);
const getMikroORMToken = (name) => `${name}_MikroORM`;
exports.getMikroORMToken = getMikroORMToken;
const InjectMikroORM = (name) => (0, common_1.Inject)((0, exports.getMikroORMToken)(name));
exports.InjectMikroORM = InjectMikroORM;
const getEntityManagerToken = (name) => `${name}_EntityManager`;
exports.getEntityManagerToken = getEntityManagerToken;
const InjectEntityManager = (name) => (0, common_1.Inject)((0, exports.getEntityManagerToken)(name));
exports.InjectEntityManager = InjectEntityManager;
const getRepositoryToken = (entity, name) => {
    const suffix = name ? `_${name}` : '';
    return `${core_1.Utils.className(entity)}Repository${suffix}`;
};
exports.getRepositoryToken = getRepositoryToken;
const InjectRepository = (entity, name) => (0, common_1.Inject)((0, exports.getRepositoryToken)(entity, name));
exports.InjectRepository = InjectRepository;
