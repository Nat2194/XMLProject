import type { DynamicModule, MiddlewareConsumer, OnApplicationShutdown } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import type { MikroOrmModuleAsyncOptions, MikroOrmModuleSyncOptions } from './typings';
import { MikroOrmModuleOptions } from './typings';
export declare class MikroOrmCoreModule implements OnApplicationShutdown {
    private readonly options;
    private readonly moduleRef;
    constructor(options: MikroOrmModuleOptions, moduleRef: ModuleRef);
    static forRoot(options?: MikroOrmModuleSyncOptions): Promise<DynamicModule>;
    static forRootAsync(options: MikroOrmModuleAsyncOptions): Promise<DynamicModule>;
    /**
     * Tries to create the driver instance to use the actual entity manager implementation for DI symbol.
     * This helps with dependency resolution issues when importing the EM from driver package (e.g. `SqlEntityManager`).
     */
    private static createEntityManager;
    onApplicationShutdown(): Promise<void>;
    configure(consumer: MiddlewareConsumer): void;
    private static setContextName;
}
