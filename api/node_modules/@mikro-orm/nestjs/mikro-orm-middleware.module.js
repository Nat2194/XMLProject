"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var MikroOrmMiddlewareModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MikroOrmMiddlewareModule = void 0;
const common_1 = require("@nestjs/common");
const mikro_orm_common_1 = require("./mikro-orm.common");
const multiple_mikro_orm_middleware_1 = require("./multiple-mikro-orm.middleware");
const middleware_helper_1 = require("./middleware.helper");
let MikroOrmMiddlewareModule = MikroOrmMiddlewareModule_1 = class MikroOrmMiddlewareModule {
    constructor(options) {
        this.options = options;
    }
    static forMiddleware(options) {
        // Work around due to nestjs not supporting the ability to register multiple types
        // https://github.com/nestjs/nest/issues/770
        // https://github.com/nestjs/nest/issues/4786#issuecomment-755032258 - workaround suggestion
        const inject = mikro_orm_common_1.CONTEXT_NAMES.map(name => (0, mikro_orm_common_1.getMikroORMToken)(name));
        return {
            module: MikroOrmMiddlewareModule_1,
            providers: [
                { provide: mikro_orm_common_1.MIKRO_ORM_MODULE_OPTIONS, useValue: options || {} },
                {
                    provide: 'MikroORMs',
                    useFactory: (...args) => args,
                    inject,
                },
            ],
            exports: ['MikroORMs'],
        };
    }
    configure(consumer) {
        consumer
            .apply(multiple_mikro_orm_middleware_1.MultipleMikroOrmMiddleware)
            .forRoutes({ path: (0, middleware_helper_1.forRoutesPath)(this.options, consumer), method: common_1.RequestMethod.ALL });
    }
};
exports.MikroOrmMiddlewareModule = MikroOrmMiddlewareModule;
exports.MikroOrmMiddlewareModule = MikroOrmMiddlewareModule = MikroOrmMiddlewareModule_1 = __decorate([
    (0, common_1.Global)(),
    (0, common_1.Module)({}),
    __param(0, (0, common_1.Inject)(mikro_orm_common_1.MIKRO_ORM_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [Object])
], MikroOrmMiddlewareModule);
