"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MikroOrmModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MikroOrmModule = void 0;
const core_1 = require("@mikro-orm/core");
const common_1 = require("@nestjs/common");
const mikro_orm_providers_1 = require("./mikro-orm.providers");
const mikro_orm_core_module_1 = require("./mikro-orm-core.module");
const mikro_orm_middleware_module_1 = require("./mikro-orm-middleware.module");
const mikro_orm_entities_storage_1 = require("./mikro-orm.entities.storage");
let MikroOrmModule = MikroOrmModule_1 = class MikroOrmModule {
    /**
     * Clears the entity storage. This is useful for testing purposes, when you want to isolate the tests.
     * Keep in mind that this should be called when using a test runner that keeps the context alive between tests (like Vitest with threads disabled).
     */
    static clearStorage(contextName) {
        mikro_orm_entities_storage_1.MikroOrmEntitiesStorage.clear(contextName);
    }
    static forRoot(options) {
        return {
            module: MikroOrmModule_1,
            imports: [mikro_orm_core_module_1.MikroOrmCoreModule.forRoot(options)],
        };
    }
    static forRootAsync(options) {
        return {
            module: MikroOrmModule_1,
            imports: [mikro_orm_core_module_1.MikroOrmCoreModule.forRootAsync(options)],
        };
    }
    static forFeature(options, contextName) {
        const entities = Array.isArray(options) ? options : (options.entities || []);
        const name = (Array.isArray(options) || contextName) ? contextName : options.contextName;
        const providers = (0, mikro_orm_providers_1.createMikroOrmRepositoryProviders)(entities, name);
        for (const e of entities) {
            if (!core_1.Utils.isString(e)) {
                mikro_orm_entities_storage_1.MikroOrmEntitiesStorage.addEntity(e, name);
            }
        }
        return {
            module: MikroOrmModule_1,
            providers: [...providers],
            exports: [...providers],
        };
    }
    static forMiddleware(options) {
        return {
            module: MikroOrmModule_1,
            imports: [mikro_orm_middleware_module_1.MikroOrmMiddlewareModule.forMiddleware(options)],
        };
    }
};
exports.MikroOrmModule = MikroOrmModule;
exports.MikroOrmModule = MikroOrmModule = MikroOrmModule_1 = __decorate([
    (0, common_1.Module)({})
], MikroOrmModule);
