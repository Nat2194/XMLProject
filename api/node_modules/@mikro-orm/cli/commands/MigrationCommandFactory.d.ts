import type { ArgumentsCamelCase, Argv, CommandModule } from 'yargs';
export declare class MigrationCommandFactory {
    static readonly DESCRIPTIONS: {
        create: string;
        up: string;
        down: string;
        list: string;
        check: string;
        pending: string;
        fresh: string;
    };
    static create<U extends Options = Options>(command: MigratorMethod): CommandModule<unknown, U> & {
        builder: (args: Argv) => Argv<U>;
        handler: (args: ArgumentsCamelCase<U>) => Promise<void>;
    };
    static configureMigrationCommand(args: Argv, method: MigratorMethod): Argv<{}>;
    private static configureUpDownCommand;
    private static configureCreateCommand;
    static handleMigrationCommand(args: ArgumentsCamelCase<Options>, method: MigratorMethod): Promise<void>;
    private static configureFreshCommand;
    private static handleUpDownCommand;
    private static handlePendingCommand;
    private static handleListCommand;
    private static handleCreateCommand;
    private static handleCheckCommand;
    private static handleFreshCommand;
    private static getUpDownOptions;
    private static getUpDownSuccessMessage;
}
type MigratorMethod = 'create' | 'check' | 'up' | 'down' | 'list' | 'pending' | 'fresh';
type CliUpDownOptions = {
    to?: string | number;
    from?: string | number;
    only?: string;
};
type GenerateOptions = {
    dump?: boolean;
    blank?: boolean;
    initial?: boolean;
    path?: string;
    disableFkChecks?: boolean;
    seed: string;
    name?: string;
};
type Options = GenerateOptions & CliUpDownOptions & {
    dropDb?: boolean;
};
export {};
