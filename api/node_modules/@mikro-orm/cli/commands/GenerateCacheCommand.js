"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateCacheCommand = void 0;
const core_1 = require("@mikro-orm/core");
const CLIHelper_1 = require("../CLIHelper");
class GenerateCacheCommand {
    constructor() {
        this.command = 'cache:generate';
        this.describe = 'Generate metadata cache';
        this.builder = (args) => {
            args.option('ts-node', {
                alias: 'ts',
                type: 'boolean',
                desc: `Use ts-node to generate '.ts' cache`,
            });
            return args;
        };
    }
    /**
     * @inheritDoc
     */
    async handler(args) {
        const config = await CLIHelper_1.CLIHelper.getConfiguration();
        if (!config.get('cache').enabled) {
            return CLIHelper_1.CLIHelper.dump(core_1.colors.red('Metadata cache is disabled in your configuration. Set cache.enabled to true to use this command.'));
        }
        config.set('logger', CLIHelper_1.CLIHelper.dump.bind(null));
        config.set('debug', true);
        const discovery = new core_1.MetadataDiscovery(core_1.MetadataStorage.init(), config.getDriver().getPlatform(), config);
        await discovery.discover(args.ts ?? false);
        CLIHelper_1.CLIHelper.dump(core_1.colors.green(`${args.ts ? 'TS' : 'JS'} metadata cache was successfully generated`));
    }
}
exports.GenerateCacheCommand = GenerateCacheCommand;
