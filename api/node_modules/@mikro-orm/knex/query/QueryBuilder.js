"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryBuilder = void 0;
const util_1 = require("util");
const core_1 = require("@mikro-orm/core");
const enums_1 = require("./enums");
const QueryBuilderHelper_1 = require("./QueryBuilderHelper");
const CriteriaNodeFactory_1 = require("./CriteriaNodeFactory");
/**
 * SQL query builder with fluent interface.
 *
 * ```ts
 * const qb = orm.em.createQueryBuilder(Publisher);
 * qb.select('*')
 *   .where({
 *     name: 'test 123',
 *     type: PublisherType.GLOBAL,
 *   })
 *   .orderBy({
 *     name: QueryOrder.DESC,
 *     type: QueryOrder.ASC,
 *   })
 *   .limit(2, 1);
 *
 * const publisher = await qb.getSingleResult();
 * ```
 */
class QueryBuilder {
    get mainAlias() {
        this.ensureFromClause();
        return this._mainAlias;
    }
    get alias() {
        return this.mainAlias.aliasName;
    }
    get helper() {
        this.ensureFromClause();
        return this._helper;
    }
    /**
     * @internal
     */
    constructor(entityName, metadata, driver, context, alias, connectionType, em) {
        this.metadata = metadata;
        this.driver = driver;
        this.context = context;
        this.connectionType = connectionType;
        this.em = em;
        /** @internal */
        this._populate = [];
        /** @internal */
        this._populateMap = {};
        this.aliasCounter = 0;
        this.flags = new Set([core_1.QueryFlag.CONVERT_CUSTOM_TYPES]);
        this.finalized = false;
        this._joins = {};
        this._explicitAlias = false;
        this._cond = {};
        this._orderBy = [];
        this._groupBy = [];
        this._having = {};
        this._joinedProps = new Map();
        this._comments = [];
        this._hintComments = [];
        this.subQueries = {};
        this._aliases = {};
        this.platform = this.driver.getPlatform();
        this.knex = this.driver.getConnection(this.connectionType).getKnex();
        if (alias) {
            this.aliasCounter++;
            this._explicitAlias = true;
        }
        // @ts-expect-error union type does not match the overloaded method signature
        this.from(entityName, alias);
    }
    select(fields, distinct = false) {
        this.ensureNotFinalized();
        this._fields = core_1.Utils.asArray(fields);
        if (distinct) {
            this.flags.add(core_1.QueryFlag.DISTINCT);
        }
        return this.init(enums_1.QueryType.SELECT);
    }
    addSelect(fields) {
        this.ensureNotFinalized();
        if (this.type && this.type !== enums_1.QueryType.SELECT) {
            return this;
        }
        return this.select([...core_1.Utils.asArray(this._fields), ...core_1.Utils.asArray(fields)]);
    }
    distinct() {
        this.ensureNotFinalized();
        return this.setFlag(core_1.QueryFlag.DISTINCT);
    }
    /** postgres only */
    distinctOn(fields) {
        this.ensureNotFinalized();
        this._distinctOn = core_1.Utils.asArray(fields);
        return this;
    }
    insert(data) {
        return this.init(enums_1.QueryType.INSERT, data);
    }
    update(data) {
        return this.init(enums_1.QueryType.UPDATE, data);
    }
    delete(cond) {
        return this.init(enums_1.QueryType.DELETE, undefined, cond);
    }
    truncate() {
        return this.init(enums_1.QueryType.TRUNCATE);
    }
    count(field, distinct = false) {
        if (field) {
            this._fields = core_1.Utils.asArray(field);
        }
        else if (this.hasToManyJoins()) {
            this._fields = this.mainAlias.metadata.primaryKeys;
        }
        else {
            this._fields = [this.raw('*')];
        }
        if (distinct) {
            this.flags.add(core_1.QueryFlag.DISTINCT);
        }
        return this.init(enums_1.QueryType.COUNT);
    }
    join(field, alias, cond = {}, type = 'innerJoin', path) {
        this.joinReference(field, alias, cond, type, path);
        return this;
    }
    leftJoin(field, alias, cond = {}) {
        return this.join(field, alias, cond, 'leftJoin');
    }
    joinAndSelect(field, alias, cond = {}, type = 'innerJoin', path, fields) {
        if (!this.type) {
            this.select('*');
        }
        const prop = this.joinReference(field, alias, cond, type, path);
        this.addSelect(this.getFieldsForJoinedLoad(prop, alias, fields));
        const [fromAlias] = this.helper.splitField(field);
        const populate = this._joinedProps.get(fromAlias);
        const item = { field: prop.name, strategy: core_1.LoadStrategy.JOINED, children: [] };
        if (populate) {
            populate.children.push(item);
        }
        else { // root entity
            this._populate.push(item);
        }
        this._joinedProps.set(alias, item);
        return this;
    }
    leftJoinAndSelect(field, alias, cond = {}, fields) {
        return this.joinAndSelect(field, alias, cond, 'leftJoin', undefined, fields);
    }
    innerJoinAndSelect(field, alias, cond = {}, fields) {
        return this.joinAndSelect(field, alias, cond, 'innerJoin', undefined, fields);
    }
    getFieldsForJoinedLoad(prop, alias, explicitFields) {
        const fields = [];
        prop.targetMeta.props
            .filter(prop => explicitFields ? explicitFields.includes(prop.name) || prop.primary : this.platform.shouldHaveColumn(prop, this._populate))
            .forEach(prop => fields.push(...this.driver.mapPropToFieldNames(this, prop, alias)));
        return fields;
    }
    withSubQuery(subQuery, alias) {
        this.ensureNotFinalized();
        this.subQueries[alias] = subQuery.toString();
        return this;
    }
    where(cond, params, operator) {
        this.ensureNotFinalized();
        if (core_1.Utils.isString(cond)) {
            cond = { [`(${cond})`]: core_1.Utils.asArray(params) };
            operator = operator || '$and';
        }
        else {
            cond = core_1.QueryHelper.processWhere({
                where: cond,
                entityName: this.mainAlias.entityName,
                metadata: this.metadata,
                platform: this.platform,
                aliasMap: this.getAliasMap(),
                aliased: !this.type || [enums_1.QueryType.SELECT, enums_1.QueryType.COUNT].includes(this.type),
                convertCustomTypes: this.flags.has(core_1.QueryFlag.CONVERT_CUSTOM_TYPES),
            });
        }
        const op = operator || params;
        const topLevel = !op || !core_1.Utils.hasObjectKeys(this._cond);
        const criteriaNode = CriteriaNodeFactory_1.CriteriaNodeFactory.createNode(this.metadata, this.mainAlias.entityName, cond);
        if ([enums_1.QueryType.UPDATE, enums_1.QueryType.DELETE].includes(this.type) && criteriaNode.willAutoJoin(this)) {
            // use sub-query to support joining
            this.setFlag(this.type === enums_1.QueryType.UPDATE ? core_1.QueryFlag.UPDATE_SUB_QUERY : core_1.QueryFlag.DELETE_SUB_QUERY);
            this.select(this.mainAlias.metadata.primaryKeys, true);
        }
        if (topLevel) {
            this._cond = criteriaNode.process(this);
        }
        else if (Array.isArray(this._cond[op])) {
            this._cond[op].push(criteriaNode.process(this));
        }
        else {
            const cond1 = [this._cond, criteriaNode.process(this)];
            this._cond = { [op]: cond1 };
        }
        if (this._onConflict) {
            this._onConflict[this._onConflict.length - 1].where = this._cond;
            this._cond = {};
        }
        return this;
    }
    andWhere(cond, params) {
        return this.where(cond, params, '$and');
    }
    orWhere(cond, params) {
        return this.where(cond, params, '$or');
    }
    orderBy(orderBy) {
        this.ensureNotFinalized();
        this._orderBy = [];
        core_1.Utils.asArray(orderBy).forEach(o => {
            const processed = core_1.QueryHelper.processWhere({
                where: o,
                entityName: this.mainAlias.entityName,
                metadata: this.metadata,
                platform: this.platform,
                aliasMap: this.getAliasMap(),
                aliased: !this.type || [enums_1.QueryType.SELECT, enums_1.QueryType.COUNT].includes(this.type),
                convertCustomTypes: false,
            });
            this._orderBy.push(CriteriaNodeFactory_1.CriteriaNodeFactory.createNode(this.metadata, this.mainAlias.entityName, processed).process(this));
        });
        return this;
    }
    groupBy(fields) {
        this.ensureNotFinalized();
        this._groupBy = core_1.Utils.asArray(fields);
        return this;
    }
    having(cond = {}, params) {
        this.ensureNotFinalized();
        if (core_1.Utils.isString(cond)) {
            cond = { [`(${cond})`]: core_1.Utils.asArray(params) };
        }
        this._having = CriteriaNodeFactory_1.CriteriaNodeFactory.createNode(this.metadata, this.mainAlias.entityName, cond).process(this);
        return this;
    }
    onConflict(fields = []) {
        const meta = this.mainAlias.metadata;
        this.ensureNotFinalized();
        this._onConflict ?? (this._onConflict = []);
        this._onConflict.push({
            fields: core_1.Utils.asArray(fields).flatMap(f => {
                const key = f.toString();
                /* istanbul ignore next */
                return meta.properties[key]?.fieldNames ?? [key];
            }),
        });
        return this;
    }
    ignore() {
        if (!this._onConflict) {
            throw new Error('You need to call `qb.onConflict()` first to use `qb.ignore()`');
        }
        this._onConflict[this._onConflict.length - 1].ignore = true;
        return this;
    }
    merge(data) {
        if (!this._onConflict) {
            throw new Error('You need to call `qb.onConflict()` first to use `qb.merge()`');
        }
        if (Array.isArray(data) && data.length === 0) {
            return this.ignore();
        }
        this._onConflict[this._onConflict.length - 1].merge = data;
        return this;
    }
    returning(fields) {
        this._returning = fields != null ? core_1.Utils.asArray(fields) : fields;
        return this;
    }
    /**
     * @internal
     */
    populate(populate, populateWhere) {
        this.ensureNotFinalized();
        this._populate = populate;
        this._populateWhere = populateWhere;
        return this;
    }
    /**
     * @internal
     */
    ref(field) {
        return this.knex.ref(field);
    }
    raw(sql, bindings = []) {
        const raw = this.knex.raw(sql, bindings);
        raw.__raw = true; // tag it as there is now way to check via `instanceof`
        return raw;
    }
    limit(limit, offset = 0) {
        this.ensureNotFinalized();
        this._limit = limit;
        if (offset) {
            this.offset(offset);
        }
        return this;
    }
    offset(offset) {
        this.ensureNotFinalized();
        this._offset = offset;
        return this;
    }
    withSchema(schema) {
        this.ensureNotFinalized();
        this._schema = schema;
        return this;
    }
    setLockMode(mode, tables) {
        this.ensureNotFinalized();
        if (mode != null && mode !== core_1.LockMode.OPTIMISTIC && !this.context) {
            throw core_1.ValidationError.transactionRequired();
        }
        this.lockMode = mode;
        this.lockTables = tables;
        return this;
    }
    setFlushMode(flushMode) {
        this.ensureNotFinalized();
        this.flushMode = flushMode;
        return this;
    }
    setFlag(flag) {
        this.ensureNotFinalized();
        this.flags.add(flag);
        return this;
    }
    unsetFlag(flag) {
        this.ensureNotFinalized();
        this.flags.delete(flag);
        return this;
    }
    cache(config = true) {
        this.ensureNotFinalized();
        this._cache = config;
        return this;
    }
    /**
     * Adds index hint to the FROM clause.
     */
    indexHint(sql) {
        this.ensureNotFinalized();
        this._indexHint = sql;
        return this;
    }
    /**
     * Prepend comment to the sql query using the syntax `/* ... *&#8205;/`. Some characters are forbidden such as `/*, *&#8205;/` and `?`.
     */
    comment(comment) {
        this.ensureNotFinalized();
        this._comments.push(...core_1.Utils.asArray(comment));
        return this;
    }
    /**
     * Add hints to the query using comment-like syntax `/*+ ... *&#8205;/`. MySQL and Oracle use this syntax for optimizer hints.
     * Also various DB proxies and routers use this syntax to pass hints to alter their behavior. In other dialects the hints
     * are ignored as simple comments.
     */
    hintComment(comment) {
        this.ensureNotFinalized();
        this._hintComments.push(...core_1.Utils.asArray(comment));
        return this;
    }
    from(target, aliasName) {
        this.ensureNotFinalized();
        if (target instanceof QueryBuilder) {
            this.fromSubQuery(target, aliasName);
        }
        else {
            const entityName = core_1.Utils.className(target);
            if (aliasName && this._mainAlias && entityName !== this._mainAlias.aliasName) {
                throw new Error(`Cannot override the alias to '${aliasName}' since a query already contains references to '${this._mainAlias.aliasName}'`);
            }
            this.fromEntityName(entityName, aliasName);
        }
        return this;
    }
    getKnexQuery() {
        this.finalize();
        const qb = this.getQueryBase();
        qb.__raw = true; // tag it as there is now way to check via `instanceof`
        core_1.Utils.runIfNotEmpty(() => this.helper.appendQueryCondition(this.type ?? enums_1.QueryType.SELECT, this._cond, qb), this._cond && !this._onConflict);
        core_1.Utils.runIfNotEmpty(() => qb.groupBy(this.prepareFields(this._groupBy, 'groupBy')), this._groupBy);
        core_1.Utils.runIfNotEmpty(() => this.helper.appendQueryCondition(this.type ?? enums_1.QueryType.SELECT, this._having, qb, undefined, 'having'), this._having);
        core_1.Utils.runIfNotEmpty(() => {
            const queryOrder = this.helper.getQueryOrder(this.type ?? enums_1.QueryType.SELECT, this._orderBy, this._populateMap);
            if (queryOrder) {
                return qb.orderByRaw(queryOrder);
            }
        }, this._orderBy);
        core_1.Utils.runIfNotEmpty(() => qb.limit(this._limit), this._limit != null);
        core_1.Utils.runIfNotEmpty(() => qb.offset(this._offset), this._offset);
        core_1.Utils.runIfNotEmpty(() => this._comments.forEach(comment => qb.comment(comment)), this._comments);
        core_1.Utils.runIfNotEmpty(() => this._hintComments.forEach(comment => qb.hintComment(comment)), this._hintComments);
        core_1.Utils.runIfNotEmpty(() => this.helper.appendOnConflictClause(this.type ?? enums_1.QueryType.SELECT, this._onConflict, qb), this._onConflict);
        if (this.type === enums_1.QueryType.TRUNCATE && this.platform.usesCascadeStatement()) {
            return this.knex.raw(qb.toSQL().toNative().sql + ' cascade');
        }
        if (this.lockMode) {
            this.helper.getLockSQL(qb, this.lockMode, this.lockTables);
        }
        this.helper.finalize(this.type ?? enums_1.QueryType.SELECT, qb, this.mainAlias.metadata, this._data, this._returning);
        return qb;
    }
    /**
     * Returns the query with parameters as wildcards.
     */
    getQuery() {
        return this.getKnexQuery().toSQL().toNative().sql;
    }
    /**
     * Returns the list of all parameters for this query.
     */
    getParams() {
        return this.getKnexQuery().toSQL().toNative().bindings;
    }
    /**
     * Returns raw interpolated query string with all the parameters inlined.
     */
    getFormattedQuery() {
        const query = this.getKnexQuery().toSQL();
        return this.platform.formatQuery(query.sql, query.bindings);
    }
    /**
     * @internal
     */
    getAliasForJoinPath(path) {
        if (!path || path === this.mainAlias.entityName) {
            return this.mainAlias.aliasName;
        }
        const join = Object.values(this._joins).find(j => j.path === path);
        if (path.endsWith('[pivot]') && join) {
            return join.alias;
        }
        return join?.inverseAlias || join?.alias;
    }
    /**
     * @internal
     */
    getNextAlias(entityName = 'e') {
        return this.driver.config.getNamingStrategy().aliasName(entityName, this.aliasCounter++);
    }
    /**
     * @internal
     */
    getAliasMap() {
        return Object.fromEntries(Object.entries(this._aliases).map(([key, value]) => [key, value.entityName]));
    }
    /**
     * Executes this QB and returns the raw results, mapped to the property names (unless disabled via last parameter).
     * Use `method` to specify what kind of result you want to get (array/single/meta).
     */
    async execute(method = 'all', options) {
        options = typeof options === 'boolean' ? { mapResults: options } : (options ?? {});
        options.mergeResults ?? (options.mergeResults = true);
        options.mapResults ?? (options.mapResults = true);
        if (!this.connectionType && method !== 'run' && [enums_1.QueryType.INSERT, enums_1.QueryType.UPDATE, enums_1.QueryType.DELETE, enums_1.QueryType.TRUNCATE].includes(this.type ?? enums_1.QueryType.SELECT)) {
            this.connectionType = 'write';
        }
        const query = this.getKnexQuery().toSQL();
        const cached = await this.em?.tryCache(this.mainAlias.entityName, this._cache, ['qb.execute', query.sql, query.bindings, method]);
        if (cached?.data) {
            return cached.data;
        }
        const write = method === 'run' || !this.platform.getConfig().get('preferReadReplicas');
        const type = this.connectionType || (write ? 'write' : 'read');
        const res = await this.driver.getConnection(type).execute(query.sql, query.bindings, method, this.context);
        const meta = this.mainAlias.metadata;
        if (!options.mapResults || !meta) {
            await this.em?.storeCache(this._cache, cached, res);
            return res;
        }
        if (method === 'run') {
            return res;
        }
        const joinedProps = this.driver.joinedProps(meta, this._populate);
        let mapped;
        if (Array.isArray(res)) {
            const map = {};
            mapped = res.map(r => this.driver.mapResult(r, meta, this._populate, this, map));
            if (options.mergeResults && joinedProps.length > 0) {
                mapped = this.driver.mergeJoinedResult(mapped, this.mainAlias.metadata, joinedProps);
            }
        }
        else {
            mapped = [this.driver.mapResult(res, meta, joinedProps, this)];
        }
        await this.em?.storeCache(this._cache, cached, mapped);
        if (method === 'get') {
            return mapped[0];
        }
        return mapped;
    }
    /**
     * Alias for `qb.getResultList()`
     */
    async getResult() {
        return this.getResultList();
    }
    /**
     * Executes the query, returning array of results
     */
    async getResultList() {
        await this.em.tryFlush(this.mainAlias.entityName, { flushMode: this.flushMode });
        const res = await this.execute('all', true);
        const entities = [];
        function propagatePopulateHint(entity, hint) {
            var _a;
            (_a = (0, core_1.helper)(entity).__serializationContext).populate ?? (_a.populate = hint);
            hint.forEach(pop => {
                const value = entity[pop.field];
                if (core_1.Utils.isEntity(value, true)) {
                    (0, core_1.helper)(value).populated();
                    propagatePopulateHint(value, pop.children ?? []);
                }
                else if (core_1.Utils.isCollection(value)) {
                    value.populated();
                    value.getItems(false).forEach(item => propagatePopulateHint(item, pop.children ?? []));
                }
            });
        }
        for (const r of res) {
            const entity = this.em.map(this.mainAlias.entityName, r, { schema: this._schema });
            propagatePopulateHint(entity, this._populate);
            entities.push(entity);
        }
        return entities;
    }
    /**
     * Executes the query, returning the first result or null
     */
    async getSingleResult() {
        const res = await this.getResultList();
        return res[0] || null;
    }
    /**
     * Executes count query (without offset and limit), returning total count of results
     */
    async getCount(field, distinct) {
        let res;
        if (this.type === enums_1.QueryType.COUNT) {
            res = await this.execute('get', false);
        }
        else {
            const qb = this.clone();
            qb.count(field, distinct ?? qb.hasToManyJoins()).limit(undefined).offset(undefined).orderBy([]);
            res = await qb.execute('get', false);
        }
        return res ? +res.count : 0;
    }
    /**
     * Executes the query, returning both array of results and total count query (without offset and limit).
     */
    async getResultAndCount() {
        return Promise.all([
            this.getResultList(),
            this.getCount(),
        ]);
    }
    /**
     * Provides promise-like interface so we can await the QB instance.
     */
    then(onfulfilled, onrejected) {
        let type = this.type ?? enums_1.QueryType.SELECT;
        if (this.flags.has(core_1.QueryFlag.UPDATE_SUB_QUERY) || this.flags.has(core_1.QueryFlag.DELETE_SUB_QUERY)) {
            type = enums_1.QueryType.UPDATE;
        }
        switch (type) {
            case enums_1.QueryType.INSERT:
            case enums_1.QueryType.UPDATE:
            case enums_1.QueryType.DELETE:
            case enums_1.QueryType.TRUNCATE:
                return this.execute('run').then(onfulfilled, onrejected);
            case enums_1.QueryType.COUNT:
                return this.getCount().then(onfulfilled, onrejected);
            case enums_1.QueryType.SELECT: return this.getResultList().then(onfulfilled, onrejected);
        }
    }
    /**
     * Returns knex instance with sub-query aliased with given alias.
     * You can provide `EntityName.propName` as alias, then the field name will be used based on the metadata
     */
    as(alias) {
        const qb = this.getKnexQuery();
        if (alias.includes('.')) {
            const [a, f] = alias.split('.');
            const meta = this.metadata.find(a);
            /* istanbul ignore next */
            alias = meta?.properties[f]?.fieldNames[0] ?? alias;
        }
        const ret = qb.as(alias);
        // tag the instance, so it is possible to detect it easily
        Object.defineProperty(ret, '__as', { enumerable: false, value: alias });
        return ret;
    }
    clone() {
        const qb = new QueryBuilder(this.mainAlias.entityName, this.metadata, this.driver, this.context, this.mainAlias.aliasName, this.connectionType, this.em);
        Object.assign(qb, this);
        // clone array/object properties
        const properties = [
            'flags', '_populate', '_populateWhere', '_populateMap', '_joins', '_joinedProps', '_cond', '_data', '_orderBy',
            '_schema', '_indexHint', '_cache', 'subQueries', 'lockMode', 'lockTables', '_groupBy', '_having', '_returning',
            '_comments', '_hintComments',
        ];
        properties.forEach(prop => qb[prop] = core_1.Utils.copy(this[prop]));
        /* istanbul ignore else */
        if (this._fields) {
            qb._fields = [...this._fields];
        }
        qb._aliases = { ...this._aliases };
        qb.finalized = false;
        return qb;
    }
    getKnex() {
        const qb = this.knex.queryBuilder();
        const { subQuery, aliasName, entityName } = this.mainAlias;
        const ref = subQuery ? subQuery : this.knex.ref(this.helper.getTableName(entityName));
        if (this.finalized && (this._explicitAlias || this.helper.isTableNameAliasRequired(this.type))) {
            ref.as(aliasName);
        }
        const schema = this.getSchema(this.mainAlias);
        if (schema) {
            ref.withSchema(schema);
        }
        qb.from(ref);
        if (this.context) {
            qb.transacting(this.context);
        }
        return qb;
    }
    joinReference(field, alias, cond, type, path) {
        this.ensureNotFinalized();
        const [fromAlias, fromField] = this.helper.splitField(field);
        const q = (str) => `'${str}'`;
        if (!this._aliases[fromAlias]) {
            throw new Error(`Trying to join ${q(fromField)} with alias ${q(fromAlias)}, but ${q(fromAlias)} is not a known alias. Available aliases are: ${Object.keys(this._aliases).map(q).join(', ')}.`);
        }
        const entityName = this._aliases[fromAlias].entityName;
        const meta = this.metadata.get(entityName);
        const prop = meta.properties[fromField];
        if (!prop) {
            throw new Error(`Trying to join ${q(field)}, but ${q(fromField)} is not a defined relation on ${meta.className}.`);
        }
        this.createAlias(prop.type, alias);
        cond = core_1.QueryHelper.processWhere({
            where: cond,
            entityName: this.mainAlias.entityName,
            metadata: this.metadata,
            platform: this.platform,
            aliasMap: this.getAliasMap(),
            aliased: !this.type || [enums_1.QueryType.SELECT, enums_1.QueryType.COUNT].includes(this.type),
        });
        let aliasedName = `${fromAlias}.${prop.name}#${alias}`;
        path ?? (path = `${(Object.values(this._joins).find(j => j.alias === fromAlias)?.path ?? entityName)}.${prop.name}`);
        if (prop.reference === core_1.ReferenceType.ONE_TO_MANY) {
            this._joins[aliasedName] = this.helper.joinOneToReference(prop, fromAlias, alias, type, cond);
        }
        else if (prop.reference === core_1.ReferenceType.MANY_TO_MANY) {
            let pivotAlias = alias;
            if (type !== 'pivotJoin') {
                const oldPivotAlias = this.getAliasForJoinPath(path + '[pivot]');
                pivotAlias = oldPivotAlias ?? this.getNextAlias(prop.pivotEntity);
                aliasedName = `${fromAlias}.${prop.name}#${pivotAlias}`;
            }
            const joins = this.helper.joinManyToManyReference(prop, fromAlias, alias, pivotAlias, type, cond, path);
            Object.assign(this._joins, joins);
            this.createAlias(prop.pivotEntity, pivotAlias);
        }
        else if (prop.reference === core_1.ReferenceType.ONE_TO_ONE) {
            this._joins[aliasedName] = this.helper.joinOneToReference(prop, fromAlias, alias, type, cond);
        }
        else { // MANY_TO_ONE
            this._joins[aliasedName] = this.helper.joinManyToOneReference(prop, fromAlias, alias, type, cond);
        }
        if (!this._joins[aliasedName].path && path) {
            this._joins[aliasedName].path = path;
        }
        return prop;
    }
    prepareFields(fields, type = 'where') {
        const ret = [];
        const getFieldName = (name) => {
            if (type === 'groupBy') {
                return this.helper.mapper(name, this.type, undefined, null);
            }
            return this.helper.mapper(name, this.type);
        };
        fields.forEach(field => {
            if (!core_1.Utils.isString(field)) {
                return ret.push(field);
            }
            const join = Object.keys(this._joins).find(k => field === k.substring(0, k.indexOf('#')));
            if (join && type === 'where') {
                return ret.push(...this.helper.mapJoinColumns(this.type ?? enums_1.QueryType.SELECT, this._joins[join]));
            }
            const [a, f] = this.helper.splitField(field);
            const prop = this.helper.getProperty(f, a);
            /* istanbul ignore next */
            if (prop && [core_1.ReferenceType.ONE_TO_MANY, core_1.ReferenceType.MANY_TO_MANY].includes(prop.reference)) {
                return;
            }
            if (prop?.embedded) {
                const name = this._aliases[a] ? `${a}.${prop.fieldNames[0]}` : prop.fieldNames[0];
                ret.push(getFieldName(name));
                return;
            }
            if (prop?.reference === core_1.ReferenceType.EMBEDDED) {
                if (prop.object) {
                    ret.push(getFieldName(prop.fieldNames[0]));
                }
                else {
                    const nest = (prop) => {
                        for (const childProp of Object.values(prop.embeddedProps)) {
                            if (childProp.fieldNames) {
                                ret.push(getFieldName(childProp.fieldNames[0]));
                            }
                            else {
                                nest(childProp);
                            }
                        }
                    };
                    nest(prop);
                }
                return;
            }
            if (prop && prop.fieldNames.length > 1) {
                ret.push(...prop.fieldNames.map(f => getFieldName(f)));
                return;
            }
            ret.push(getFieldName(field));
        });
        const meta = this.mainAlias.metadata;
        /* istanbul ignore next */
        const requiresSQLConversion = meta?.props.filter(p => p.hasConvertToJSValueSQL && p.persist !== false) ?? [];
        if (this.flags.has(core_1.QueryFlag.CONVERT_CUSTOM_TYPES) && (fields.includes('*') || fields.includes(`${this.mainAlias.aliasName}.*`)) && requiresSQLConversion.length > 0) {
            requiresSQLConversion.forEach(p => ret.push(this.helper.mapper(p.name, this.type)));
        }
        Object.keys(this._populateMap).forEach(f => {
            if (!fields.includes(f.replace(/#\w+$/, '')) && type === 'where') {
                const cols = this.helper.mapJoinColumns(this.type ?? enums_1.QueryType.SELECT, this._joins[f]);
                ret.push(...cols);
            }
            if (this._joins[f].prop.reference !== core_1.ReferenceType.ONE_TO_ONE && this._joins[f].inverseJoinColumns) {
                this._joins[f].inverseJoinColumns.forEach(inverseJoinColumn => {
                    core_1.Utils.renameKey(this._cond, inverseJoinColumn, `${this._joins[f].alias}.${inverseJoinColumn}`);
                });
            }
        });
        return ret;
    }
    init(type, data, cond) {
        this.ensureNotFinalized();
        this.type = type;
        if ([enums_1.QueryType.UPDATE, enums_1.QueryType.DELETE].includes(type) && core_1.Utils.hasObjectKeys(this._cond)) {
            throw new Error(`You are trying to call \`qb.where().${type.toLowerCase()}()\`. Calling \`qb.${type.toLowerCase()}()\` before \`qb.where()\` is required.`);
        }
        if (!this.helper.isTableNameAliasRequired(type)) {
            delete this._fields;
        }
        if (data) {
            if (core_1.Utils.isEntity(data)) {
                data = this.em?.getComparator().prepareEntity(data) ?? (0, core_1.serialize)(data);
            }
            this._data = this.helper.processData(data, this.flags.has(core_1.QueryFlag.CONVERT_CUSTOM_TYPES));
        }
        if (cond) {
            this.where(cond);
        }
        return this;
    }
    getQueryBase() {
        const qb = this.getKnex();
        const schema = this.getSchema(this.mainAlias);
        // Joined tables doesn't need to belong to the same schema as the main table
        const joinSchema = this._schema ?? this.em?.schema ?? schema;
        if (schema) {
            qb.withSchema(schema);
        }
        if (this._indexHint) {
            const alias = this.helper.isTableNameAliasRequired(this.type) ? ` as ${this.platform.quoteIdentifier(this.mainAlias.aliasName)}` : '';
            const schemaQuoted = schema ? this.platform.quoteIdentifier(schema) + '.' : '';
            const tableName = schemaQuoted + this.platform.quoteIdentifier(this.helper.getTableName(this.mainAlias.entityName)) + alias;
            qb.from(this.knex.raw(`${tableName} ${this._indexHint}`));
        }
        switch (this.type) {
            case enums_1.QueryType.SELECT:
                qb.select(this.prepareFields(this._fields));
                if (this._distinctOn) {
                    qb.distinctOn(this._distinctOn);
                }
                else if (this.flags.has(core_1.QueryFlag.DISTINCT)) {
                    qb.distinct();
                }
                this.helper.processJoins(qb, this._joins, joinSchema);
                break;
            case enums_1.QueryType.COUNT: {
                const m = this.flags.has(core_1.QueryFlag.DISTINCT) ? 'countDistinct' : 'count';
                qb[m]({ count: this._fields.map(f => this.helper.mapper(f, this.type)) });
                this.helper.processJoins(qb, this._joins, joinSchema);
                break;
            }
            case enums_1.QueryType.INSERT:
                qb.insert(this._data);
                break;
            case enums_1.QueryType.UPDATE:
                qb.update(this._data);
                this.helper.updateVersionProperty(qb, this._data);
                break;
            case enums_1.QueryType.DELETE:
                qb.delete();
                break;
            case enums_1.QueryType.TRUNCATE:
                qb.truncate();
                break;
        }
        return qb;
    }
    finalize() {
        if (this.finalized) {
            return;
        }
        if (!this.type) {
            this.select('*');
        }
        const meta = this.mainAlias.metadata;
        if (meta && this.flags.has(core_1.QueryFlag.AUTO_JOIN_ONE_TO_ONE_OWNER)) {
            const relationsToPopulate = this._populate.map(({ field }) => field);
            meta.relations
                .filter(prop => prop.reference === core_1.ReferenceType.ONE_TO_ONE && !prop.owner && !relationsToPopulate.includes(prop.name))
                .map(prop => ({ field: prop.name }))
                .forEach(item => this._populate.push(item));
        }
        this._populate.forEach(({ field }) => {
            const [fromAlias, fromField] = this.helper.splitField(field);
            const aliasedField = `${fromAlias}.${fromField}`;
            const join = Object.keys(this._joins).find(k => `${aliasedField}#${this._joins[k].alias}` === k);
            if (join && this._joins[join] && this.helper.isOneToOneInverse(fromField)) {
                return this._populateMap[join] = this._joins[join].alias;
            }
            if (this.metadata.find(field)?.pivotTable) { // pivot table entity
                this.autoJoinPivotTable(field);
            }
            else if (meta && this.helper.isOneToOneInverse(fromField)) {
                const prop = meta.properties[fromField];
                const alias = this.getNextAlias(prop.pivotEntity ?? prop.type);
                const aliasedName = `${fromAlias}.${prop.name}#${alias}`;
                this._joins[aliasedName] = this.helper.joinOneToReference(prop, this.mainAlias.aliasName, alias, 'leftJoin');
                this._populateMap[aliasedName] = this._joins[aliasedName].alias;
            }
        });
        if (meta && (this._fields?.includes('*') || this._fields?.includes(`${this.mainAlias.aliasName}.*`))) {
            meta.props
                .filter(prop => prop.formula && (!prop.lazy || this.flags.has(core_1.QueryFlag.INCLUDE_LAZY_FORMULAS)))
                .map(prop => {
                const alias = this.knex.ref(this.mainAlias.aliasName).toString();
                const aliased = this.knex.ref(prop.fieldNames[0]).toString();
                return `${prop.formula(alias)} as ${aliased}`;
            })
                .filter(field => !this._fields.includes(field))
                .forEach(field => this.addSelect(field));
        }
        this.processPopulateWhere();
        core_1.QueryHelper.processObjectParams(this._data);
        core_1.QueryHelper.processObjectParams(this._cond);
        core_1.QueryHelper.processObjectParams(this._having);
        // automatically enable paginate flag when we detect to-many joins, but only if there is no `group by` clause
        if (!this.flags.has(core_1.QueryFlag.DISABLE_PAGINATE) && this._groupBy.length === 0 && this.hasToManyJoins()) {
            this.flags.add(core_1.QueryFlag.PAGINATE);
        }
        if (meta && this.flags.has(core_1.QueryFlag.PAGINATE) && (this._limit > 0 || this._offset > 0)) {
            this.wrapPaginateSubQuery(meta);
        }
        if (meta && (this.flags.has(core_1.QueryFlag.UPDATE_SUB_QUERY) || this.flags.has(core_1.QueryFlag.DELETE_SUB_QUERY))) {
            this.wrapModifySubQuery(meta);
        }
        this.finalized = true;
    }
    processPopulateWhere() {
        if (this._populateWhere == null || this._populateWhere === core_1.PopulateHint.ALL) {
            return;
        }
        const joins = Object.values(this._joins);
        joins.forEach(join => {
            join.cond_ = join.cond;
            join.cond = {};
        });
        const replaceOnConditions = (cond) => {
            Object.keys(cond).forEach(k => {
                if (core_1.Utils.isOperator(k)) {
                    if (Array.isArray(cond[k])) {
                        return cond[k].forEach((c) => replaceOnConditions(c));
                    }
                    return replaceOnConditions(cond[k]);
                }
                const [a] = this.helper.splitField(k);
                const join = joins.find(j => j.alias === a);
                if (join) {
                    join.cond = { ...join.cond, [k]: cond[k] };
                }
            });
        };
        if (this._populateWhere === core_1.PopulateHint.INFER) {
            replaceOnConditions(this._cond);
        }
        else if (typeof this._populateWhere === 'object') {
            const cond = CriteriaNodeFactory_1.CriteriaNodeFactory
                .createNode(this.metadata, this.mainAlias.entityName, this._populateWhere)
                .process(this);
            replaceOnConditions(cond);
        }
    }
    hasToManyJoins() {
        return Object.values(this._joins).some(join => {
            return [core_1.ReferenceType.ONE_TO_MANY, core_1.ReferenceType.MANY_TO_MANY].includes(join.prop.reference);
        });
    }
    wrapPaginateSubQuery(meta) {
        const pks = this.prepareFields(meta.primaryKeys, 'sub-query');
        const subQuery = this.clone().select(pks).groupBy(pks).limit(this._limit);
        // revert the on conditions added via populateWhere, we want to apply those only once
        Object.values(subQuery._joins).forEach(join => join.cond = join.cond_ ?? {});
        if (this._offset) {
            subQuery.offset(this._offset);
        }
        const addToSelect = [];
        if (this._orderBy.length > 0) {
            const orderBy = [];
            for (const orderMap of this._orderBy) {
                for (const [field, direction] of Object.entries(orderMap)) {
                    const [a, f] = this.helper.splitField(field);
                    const prop = this.helper.getProperty(f, a);
                    const type = this.platform.castColumn(prop);
                    const fieldName = this.helper.mapper(field, this.type, undefined, null);
                    if (!prop?.persist && !prop?.formula) {
                        addToSelect.push(fieldName);
                    }
                    orderBy.push({ [`min(${this.ref(fieldName)}${type})`]: direction });
                }
            }
            subQuery.orderBy(orderBy);
        }
        subQuery.finalized = true;
        const knexQuery = subQuery.as(this.mainAlias.aliasName).clearSelect().select(pks);
        if (addToSelect.length > 0) {
            addToSelect.forEach(prop => {
                const field = this._fields.find(field => {
                    if (typeof field === 'object' && field && '__as' in field) {
                        return field.__as === prop;
                    }
                    // not perfect, but should work most of the time, ideally we should check only the alias (`... as alias`)
                    return field.toString().includes(prop);
                });
                if (field) {
                    knexQuery.select(field);
                }
            });
        }
        // multiple sub-queries are needed to get around mysql limitations with order by + limit + where in + group by (o.O)
        // https://stackoverflow.com/questions/17892762/mysql-this-version-of-mysql-doesnt-yet-support-limit-in-all-any-some-subqu
        const subSubQuery = this.getKnex().select(pks).from(knexQuery);
        subSubQuery.__raw = true; // tag it as there is now way to check via `instanceof`
        this._limit = undefined;
        this._offset = undefined;
        this.select(this._fields).where({ [core_1.Utils.getPrimaryKeyHash(meta.primaryKeys)]: { $in: subSubQuery } });
    }
    wrapModifySubQuery(meta) {
        const subQuery = this.clone();
        subQuery.finalized = true;
        // wrap one more time to get around MySQL limitations
        // https://stackoverflow.com/questions/45494/mysql-error-1093-cant-specify-target-table-for-update-in-from-clause
        const subSubQuery = this.getKnex().select(this.prepareFields(meta.primaryKeys)).from(subQuery.as(this.mainAlias.aliasName));
        const method = this.flags.has(core_1.QueryFlag.UPDATE_SUB_QUERY) ? 'update' : 'delete';
        this._cond = {}; // otherwise we would trigger validation error
        this[method](this._data).where({
            [core_1.Utils.getPrimaryKeyHash(meta.primaryKeys)]: { $in: subSubQuery },
        });
    }
    autoJoinPivotTable(field) {
        const pivotMeta = this.metadata.find(field);
        const owner = pivotMeta.relations[0];
        const inverse = pivotMeta.relations[1];
        const prop = this._cond[pivotMeta.name + '.' + owner.name] || this._orderBy[pivotMeta.name + '.' + owner.name] ? inverse : owner;
        const pivotAlias = this.getNextAlias(pivotMeta.name);
        this._joins[field] = this.helper.joinPivotTable(field, prop, this.mainAlias.aliasName, pivotAlias, 'leftJoin');
        core_1.Utils.renameKey(this._cond, `${field}.${owner.name}`, core_1.Utils.getPrimaryKeyHash(owner.fieldNames.map(fieldName => `${pivotAlias}.${fieldName}`)));
        core_1.Utils.renameKey(this._cond, `${field}.${inverse.name}`, core_1.Utils.getPrimaryKeyHash(inverse.fieldNames.map(fieldName => `${pivotAlias}.${fieldName}`)));
        this._populateMap[field] = this._joins[field].alias;
    }
    getSchema(alias) {
        const { metadata } = alias;
        const metaSchema = metadata?.schema && metadata.schema !== '*' ? metadata.schema : undefined;
        return this._schema ?? metaSchema ?? this.em?.schema ?? this.em?.config.get('schema');
    }
    createAlias(entityName, aliasName, subQuery) {
        const metadata = this.metadata.find(entityName);
        const alias = { aliasName, entityName, metadata, subQuery };
        this._aliases[aliasName] = alias;
        return alias;
    }
    createMainAlias(entityName, aliasName, subQuery) {
        this._mainAlias = this.createAlias(entityName, aliasName, subQuery);
        this._helper = this.createQueryBuilderHelper();
        return this._mainAlias;
    }
    fromSubQuery(target, aliasName) {
        const subQuery = target.getKnexQuery();
        const { entityName } = target.mainAlias;
        aliasName ?? (aliasName = this.getNextAlias(entityName));
        this.createMainAlias(entityName, aliasName, subQuery);
    }
    fromEntityName(entityName, aliasName) {
        aliasName ?? (aliasName = this._mainAlias?.aliasName ?? this.getNextAlias(entityName));
        this.createMainAlias(entityName, aliasName);
    }
    createQueryBuilderHelper() {
        return new QueryBuilderHelper_1.QueryBuilderHelper(this.mainAlias.entityName, this.mainAlias.aliasName, this._aliases, this.subQueries, this.knex, this.driver);
    }
    ensureFromClause() {
        /* istanbul ignore next */
        if (!this._mainAlias) {
            throw new Error(`Cannot proceed to build a query because the main alias is not set.`);
        }
    }
    ensureNotFinalized() {
        if (this.finalized) {
            throw new Error('This QueryBuilder instance is already finalized, clone it first if you want to modify it.');
        }
    }
    /* istanbul ignore next */
    [util_1.inspect.custom](depth) {
        const object = { ...this };
        const hidden = ['metadata', 'driver', 'context', 'platform', 'knex', 'type'];
        Object.keys(object).filter(k => k.startsWith('_')).forEach(k => delete object[k]);
        Object.keys(object).filter(k => object[k] == null).forEach(k => delete object[k]);
        hidden.forEach(k => delete object[k]);
        let prefix = this.type ? this.type.substring(0, 1) + this.type.toLowerCase().substring(1) : '';
        if (this._data) {
            object.data = this._data;
        }
        if (!core_1.Utils.isEmpty(this._cond)) {
            object.where = this._cond;
        }
        if (this._onConflict?.[0]) {
            prefix = 'Upsert';
            object.onConflict = this._onConflict[0];
        }
        const name = this._mainAlias ? `${prefix}QueryBuilder<${this._mainAlias?.entityName}>` : 'QueryBuilder';
        const ret = (0, util_1.inspect)(object, { depth });
        return ret === '[Object]' ? `[${name}]` : name + ' ' + ret;
    }
}
exports.QueryBuilder = QueryBuilder;
